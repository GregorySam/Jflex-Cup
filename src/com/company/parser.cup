/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

action code {:


        class Functions{
            int num=0;

            public String SetStringInParameters(String str)
            {
                String out,tmp;

                if(str == null || str.isEmpty()){return "";}


                out="String "+str;
                int index = out.indexOf(",");

                while (index >= 0) {

                    out=out.substring(0,index)+",String "+out.substring(index+1,out.length());
                    index = out.indexOf(",", index + 1);

                }
                return out;
            }
        }

        Functions fun=new Functions();




:}


/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS,LPAREN, RPAREN,STRING,RBRACKET,LBRACKET,COMMA,PAR_RBRACKET,PARAMETERS;
terminal            IDENTIFIER;        // our scanner provides numbers as integers

/*  Non terminals */
non terminal            expr;
non terminal            function_decl;
non terminal            function_decls;
non terminal            function_call;
non terminal            parameters;
non terminal            parameters_decl;
non terminal            statement;
non terminal            programme;
non terminal             function_calls;
non terminal            main_body;
non terminal            parameters_call;
non terminal            object;
/**
 *  The Grammar Rules
 */

precedence left IDENTIFIER;

programme ::=function_decls:mb {:System.out.println("public class Main {\t\n"+mb+"\n"+"}");:};

main_body   ::= function_decl:fd function_calls:fcs   {:RESULT="\tpublic static void main(String[] args) {\n"+fcs+"\n"+"\t}\n"+fd;:};

function_calls ::= function_call:fc function_calls:fcs {:RESULT="\t\tSystem.out.println("+fc+");\n"+fcs;:}
                    |function_call:fc                  {:RESULT="\t\tSystem.out.println("+fc+");\n";:}
                    ;



function_decls ::= function_decl:fd function_decls:fds                                                              {:RESULT=(String)fd+(String)fds;:}
                    |
                    ;


function_decl ::=  IDENTIFIER:id LPAREN  PARAMETERS:p RPAREN LBRACKET  statement:in RBRACKET                       {:RESULT="\tpublic static String "+id+"("+fun.SetStringInParameters((String)p)+")"+
                                                                                                                                            "{\n"+"\t\t"+in+"\n"+"\t}\n";:}

                   |IDENTIFIER:id LPAREN  IDENTIFIER:pid RPAREN LBRACKET  statement:in RBRACKET                       {:RESULT="\tpublic static String "+id+"("+fun.SetStringInParameters((String)pid)+")"+
                                                                                                                                 "{\n"+"\t\t"+in+"\n"+"\t}\n";:}

                   |IDENTIFIER:id LPAREN  RPAREN LBRACKET  statement:in RBRACKET                       {:RESULT="\tpublic static String "+id+"("+")"+
                                                                                                                                "{\n"+"\t\t"+in+"\n"+"\t}\n";:}
                   ;




parameters_call  ::= parameters_call:pc COMMA  statement:e   {:RESULT=pc+","+e;:}
                    |statement:e                              {:RESULT=e;:}
                    ;



function_call ::=IDENTIFIER:id LPAREN parameters_call:p RPAREN {:RESULT=id+"("+p+")";:};



statement    ::=statement:s PLUS object:o              {:RESULT=s+"+"+o;:}
            |object:o                               {:RESULT=o;:}
            |LPAREN statement:e RPAREN                 {:RESULT="("+e+")";:}
            ;

object ::=   IDENTIFIER:id                             {:RESULT=id;:}
             |STRING:str                                {:RESULT=str;:}
             |function_call:fc                          {:RESULT=fc;:}
             ;


